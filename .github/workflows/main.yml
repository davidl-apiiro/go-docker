name: Docker Build and Apiiro Scan

on:
  workflow_dispatch:


jobs:
  docker-build:
    name: Docker Build
    runs-on: ubuntu-latest

    steps:
    # Check out code from the repository
    - name: Check out repository
      uses: actions/checkout@v2

    # Build the Docker image
    - name: Build Docker image
      run: docker build -t my-image:${{ github.run_id }} .

  apiiro-scan:
    name: Apiiro Build Scan
    runs-on: ubuntu-latest
    needs: docker-build # Ensures this job runs only after 'docker-build' completes successfully

    steps:
    # Apiiro API Build Scan
    - name: Apiiro API Build Scan
      run: |
        return_string=$(curl  -s --location 'https://app-staging.apiiro.com/rest-api/v1/buildScan/builds' \
              --header 'Content-Type: application/json' \
              --header 'Authorization: Bearer ${{ secrets.BEARER_TOKEN }}' \
              --data '
              {
              "commitSha": "${{ github.sha }}",
              "repositoryUrl": "https://github.com/davidl-apiiro/go-docker",
              "buildId": "${{ github.run_id }}"
              }')
        echo "$return_string"
        echo "${{ github.sha }}"
        echo "${{ github.run_id }}"
        echo "RETURN_STRING=$return_string" >> $GITHUB_ENV
      continue-on-error: true

    - name: Apiiro API Results Scan
      run: |
        max_retries=20
        current_retry=0
    
        while true; do
            # Save the output and HTTP status in separate variables
            response=$(curl -sS -w "%{http_code}" --insecure --retry 15 --retry-max-time 900 --retry-delay 45 --location --request GET "https://app-staging.apiiro.com/rest-api/v2/buildScan/${{ env.RETURN_STRING }}/results" \
            --header 'Content-Type: application/json' \
            --header 'Authorization: Bearer ${{ secrets.BEARER_TOKEN }}' -o temp_response.json)
            http_status=$(tail -n1 temp_response.json) # Get the last line where http status is stored
            response=$(sed '$ d' temp_response.json) # Remove the last line containing the HTTP status
    
            if [ "$http_status" -ne 200 ]; then
                echo "Request failed with HTTP status $http_status"
                if [ "$http_status" -eq 503 ]; then
                    echo "Service unavailable. Retrying in 5 seconds..."
                    sleep 5
                else
                    echo "Response: $response"
                    exit 1
                fi
            else
                # Parse the response with jq
                buildPassed=$(echo "$response" | jq '.buildPassed')
                if [[ "$buildPassed" == "true" ]]; then
                    echo "Pipeline can continue. Apiiro scan passed."
                    exit 0
                else
                    echo "Pipeline cannot continue. Apiiro scan indicated failure or was inconclusive."
                    exit 1
                fi
            fi
    
            ((current_retry++))
            if [[ $current_retry -ge $max_retries ]]; then
                echo "Max retries reached. Exiting."
                exit 1
            fi
        done
        rm temp_response.json # Clean up
    
