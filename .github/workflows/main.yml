name: Docker Build and Apiiro Scan

on:
  workflow_dispatch:


jobs:
  docker-build:
    name: Docker Build
    runs-on: ubuntu-latest

    steps:
    # Check out code from the repository
    - name: Check out repository
      uses: actions/checkout@v2

    # Build the Docker image
    - name: Build Docker image
      run: docker build -t my-image:${{ github.run_id }} .

  apiiro-scan:
    name: Apiiro Build Scan
    runs-on: ubuntu-latest
    needs: docker-build # Ensures this job runs only after 'docker-build' completes successfully

    steps:
    # Apiiro API Build Scan
    - name: Apiiro API Build Scan
      run: |
        return_string=$(curl  -s --location 'https://app-staging.apiiro.com/rest-api/v1/buildScan/builds' \
              --header 'Content-Type: application/json' \
              --header 'Authorization: Bearer ${{ secrets.BEARER_TOKEN }}' \
              --data '
              {
              "commitSha": "${{ github.sha }}",
              "repositoryUrl": "https://github.com/davidl-apiiro/go-docker",
              "buildId": "${{ github.run_id }}"
              }')
        echo "$return_string"
        echo "${{ github.sha }}"
        echo "${{ github.run_id }}"
        echo "RETURN_STRING=$return_string" >> $GITHUB_ENV
      continue-on-error: true

    - name: Apiiro API Results Scan
      run: |
        max_retries=20
        current_retry=0
    
        while true; do
            # Use curl with -w to capture HTTP status code
            http_status=$(curl -sS -w "%{http_code}" --insecure --retry 15 --retry-max-time 900 --retry-delay 45 --location --request GET "https://app-staging.apiiro.com/rest-api/v2/buildScan/${{ env.RETURN_STRING }}/results" \
            --header 'Content-Type: application/json' \
            --header 'Authorization: Bearer ${{ secrets.BEARER_TOKEN }}' \
            -o response.json)
    
            # Check HTTP status code
            if [[ "$http_status" != "200" ]]; then
                echo "Request failed with status $http_status."
                if [[ "$http_status" == "503" ]]; then
                    echo "Service unavailable. Retrying..."
                else
                    cat response.json
                    exit 1 # Exit if the error is not a 503
                fi
            fi
    
            # Read response into a variable and delete the temp file
            response=$(<response.json)
            rm response.json
    
            # Increment retry counter
            ((current_retry++))
    
            # Check if the response is valid JSON
            if ! echo "$response" | jq empty 2>/dev/null; then
                echo "Received an invalid JSON response. Waiting before the next check..."
                sleep 5
            else
                # Extract 'buildPassed' status
                buildPassed=$(echo "$response" | jq '.buildPassed')
    
                if [[ "$buildPassed" == "true" ]]; then
                    echo "Pipeline can continue. Apiiro scan passed."
                    echo "API Response Summary:"
                    echo "$response" | jq -r '.summary'
                    echo "API Scan Results:"
                    echo "$response" | jq -r '.scanResults[]'
                    exit 0
                elif [[ "$buildPassed" == "false" ]]; then
                    echo "Pipeline cannot continue. Apiiro scan failed."
                    exit 1
                else
                    echo "Unexpected JSON format or missing 'buildPassed' key. Response was: $response"
                    sleep 5
                fi
            fi
    
            # Break if max retries reached
            if [[ $current_retry -ge $max_retries ]]; then
                echo "Max retries reached without a conclusive result. Exiting."
                exit 1
            fi
        done
